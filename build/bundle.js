var PhoneMaskInput = (function (internal) {
  'use strict';

  /* src\PhoneMaskInput.svelte generated by Svelte v3.50.0 */

  function create_fragment(ctx) {
  	let div2;
  	let input;
  	let t0;
  	let div0;
  	let t1;
  	let div0_style_value;
  	let t2;
  	let div1;
  	let t3;
  	let mounted;
  	let dispose;

  	return {
  		c() {
  			div2 = internal.element("div");
  			input = internal.element("input");
  			t0 = internal.space();
  			div0 = internal.element("div");
  			t1 = internal.text(/*holderValue*/ ctx[1]);
  			t2 = internal.space();
  			div1 = internal.element("div");
  			t3 = internal.text(/*value*/ ctx[3]);
  			internal.attr(input, "type", "text");
  			internal.attr(input, "class", "svelte-1o35fjr");
  			internal.attr(div0, "class", "placeholder svelte-1o35fjr");
  			internal.attr(div0, "style", div0_style_value = `margin-left: ${/*holderOffset*/ ctx[2]}px;`);
  			internal.attr(div1, "class", "mask svelte-1o35fjr");
  			internal.attr(div2, "class", "container svelte-1o35fjr");
  		},
  		m(target, anchor) {
  			internal.insert(target, div2, anchor);
  			internal.append(div2, input);
  			internal.set_input_value(input, /*value*/ ctx[3]);
  			internal.append(div2, t0);
  			internal.append(div2, div0);
  			internal.append(div0, t1);
  			internal.append(div2, t2);
  			internal.append(div2, div1);
  			internal.append(div1, t3);
  			/*div1_binding*/ ctx[7](div1);

  			if (!mounted) {
  				dispose = [
  					internal.listen(input, "input", /*onInput*/ ctx[4]),
  					internal.listen(input, "input", /*input_input_handler*/ ctx[6])
  				];

  				mounted = true;
  			}
  		},
  		p(ctx, [dirty]) {
  			if (dirty & /*value*/ 8 && input.value !== /*value*/ ctx[3]) {
  				internal.set_input_value(input, /*value*/ ctx[3]);
  			}

  			if (dirty & /*holderValue*/ 2) internal.set_data(t1, /*holderValue*/ ctx[1]);

  			if (dirty & /*holderOffset*/ 4 && div0_style_value !== (div0_style_value = `margin-left: ${/*holderOffset*/ ctx[2]}px;`)) {
  				internal.attr(div0, "style", div0_style_value);
  			}

  			if (dirty & /*value*/ 8) internal.set_data(t3, /*value*/ ctx[3]);
  		},
  		i: internal.noop,
  		o: internal.noop,
  		d(detaching) {
  			if (detaching) internal.detach(div2);
  			/*div1_binding*/ ctx[7](null);
  			mounted = false;
  			internal.run_all(dispose);
  		}
  	};
  }

  function instance($$self, $$props, $$invalidate) {
  	let { originHolder = '+7(000)0000000' } = $$props;

  	/**
   * @type {HTMLElement}
   */
  	let shadowElement = null;

  	let holderValue = originHolder;
  	let holderOffset = 0;
  	let value = '';
  	let notNumbers = Array.from(originHolder).reduce((acc, c, i, arr) => (Number.isNaN(Number.parseInt(c)) ? acc[i] = c : '', acc), []);

  	/**
  * @param {InputEvent} event
  */
  	function onInput(event) {
  		const formatHolder = autoValue => {
  			let len = (autoValue || event.target.value).length;
  			$$invalidate(1, holderValue = originHolder.slice(len));

  			setTimeout(() => {
  				$$invalidate(2, holderOffset = shadowElement.offsetWidth);
  			});
  		};

  		console.log(event);

  		if (~['insertText', 'insertFromPaste'].indexOf(event.inputType)) {
  			console.log(event.inputType);
  			let autoValue = validate(event.inputType, event);

  			if (autoValue === false) {
  				event.target.value = value;

  				// value = event.target.value;
  				return;
  			}

  			formatHolder(autoValue);
  		} else if (~['deleteContentBackward', 'deleteContentForward'].indexOf(event.inputType)) {
  			console.log(event);

  			// проверяем регуляркой:
  			if (!(event.target.value.match(/\+\d\(\d{3}\)\d*/) || event.target.value.match(/\+\d\(\d{0,3}/) || event.target.value.match(/\+?/))) {
  				event.target.value = value;
  				return;
  			}

  			formatHolder('');
  		}
  	}

  	/**
   * 
   * @param {string} typeInput // {"insertText"|"deleteContentBackward"}
   * @param {InputEvent} event
   */
  	function validate(typeInput, event) {
  		let data = event.data;
  		console.log(data);

  		if (data && data.length === 1) {
  			for (const i in notNumbers) {
  				if (Object.hasOwnProperty.call(notNumbers, i)) {
  					const char = notNumbers[+i];

  					if (value.length == +i && !Number.isNaN(Number.parseInt(data))) {
  						$$invalidate(3, value += char + data);
  						event.target.value = value;
  						return value;
  					}
  				} // else if(data === c) return false;
  			}

  			// if (value.length == 0){
  			//   if (!Number.isNaN(Number.parseInt(data))){
  			//     value = '+' + data;
  			//     event.target.value = value;
  			//     return value;
  			//   }
  			//   else if(data === '+') return false;
  			// }
  			// else if (value.length == 2){
  			//   if (!Number.isNaN(Number.parseInt(data))){
  			//     value += '(' + data;
  			//     event.target.value = value;
  			//     return value;
  			//   }        
  			// }
  			// else if (value.length == 6){
  			//   if (!Number.isNaN(Number.parseInt(data))){
  			//     value += ')' + data;
  			//     event.target.value = value;
  			//     return value;
  			//   }        
  			// }
  			if (!Number.isNaN(Number.parseInt(data)) && value.length < 14) {
  				$$invalidate(3, value += data);
  				event.target.value = value;
  				return value;
  			}
  		} else if (data && data.length > 1 && data.length < 13) {
  			// if (data.match(/\d/))
  			return false;
  		}

  		return false;
  	}

  	function input_input_handler() {
  		value = this.value;
  		$$invalidate(3, value);
  	}

  	function div1_binding($$value) {
  		internal.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
  			shadowElement = $$value;
  			$$invalidate(0, shadowElement);
  		});
  	}

  	$$self.$$set = $$props => {
  		if ('originHolder' in $$props) $$invalidate(5, originHolder = $$props.originHolder);
  	};

  	return [
  		shadowElement,
  		holderValue,
  		holderOffset,
  		value,
  		onInput,
  		originHolder,
  		input_input_handler,
  		div1_binding
  	];
  }

  class PhoneMaskInput extends internal.SvelteComponent {
  	constructor(options) {
  		super();
  		internal.init(this, options, instance, create_fragment, internal.safe_not_equal, { originHolder: 5 });
  	}
  }

  const app = new PhoneMaskInput({
    target: document.getElementById('app'),
    props: {
      originHolder: '+0(000)0000000'
    }
  });

  return app;

})(internal);
